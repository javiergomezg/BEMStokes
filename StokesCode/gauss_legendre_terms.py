import numpy as np

def gauss_leg_coef(NQ):
    
    if NQ < 2 or NQ > 10:
        NQ = 7
        print 'Los nodos de cuadratura son cambiados por la cantidad por'
        print 'defecto ', NQ
    
    w = np.zeros(NQ, dtype=np.float64)
    node = np.zeros(NQ, dtype=np.float64)
    
    if NQ == 2:
        w[0] = 1.
        w[1] = 1.
        
        node[0] = -0.57735026918962576451
        node[1] = -node[0]

    elif NQ == 3:
        w[0] = 0.55555555555555555556
        w[1] = 0.88888888888888888889
        w[2] = w[0]
        
        node[0] = -0.77459666924148337704
        node[1] =  0.
        node[2] = -node[0]
        
    elif NQ == 4:
        w[0] = 0.3478548451374538574
        w[1] = 0.6521451548625461426
        w[2], w[3] = w[1], w[0]
        
        node[0] = -0.86113631159405257522
        node[1] = -0.33998104358485626480
        node[2], node[3] = -node[1], -node[0]
        
    elif NQ == 5:
        w[0] = 0.2369268850561890875
        w[1] = 0.4786286704993664680
        w[2] = 0.5688888888888888889
        w[3], w[4] = w[1], w[0]
        
        node[0] = -0.90617984593866399280
        node[1] = -0.53846931010568309104
        node[2] =  0.
        node[3], node[4] = -node[1], -node[0]
    
    elif NQ == 6:
        w[0] = 0.1713244924791703450
        w[1] = 0.3607615730481386076
        w[2] = 0.4679139345726910474
        w[3], w[4], w[5] = w[2], w[1], w[0]
        
        node[0] = -0.93246951420315202781
        node[1] = -0.66120938646626451366
        node[2] = -0.23861918608319690863
        node[3], node[4], node[5] = -node[2], -node[1], -node[0]
        
    elif NQ == 7:
        w[0] = 0.1294849661688696933
        w[1] = 0.2797053914892766679
        w[2] = 0.3818300505051189450
        w[3] = 0.4179591836734693878
        w[4], w[5], w[6] = w[2], w[1], w[0]
        
        node[0] = -0.94910791234275852453
        node[1] = -0.74153118559939443986
        node[2] = -0.40584515137739716691
        node[3] =  0.
        node[4], node[5], node[6] = -node[2], -node[1], -node[0]
        
    elif NQ == 8:
        w[0] = 0.1012285362903762592
        w[1] = 0.2223810344533744705
        w[2] = 0.3137066458778872873
        w[3] = 0.3626837833783619830
        w[4], w[5], w[6], w[7] = w[3], w[2], w[1], w[0]
        
        node[0] = -0.96028985649753623168
        node[1] = -0.79666647741362673959
        node[2] = -0.52553240991632898582
        node[3] = -0.18343464249564980494
        node[4] = -node[3]
        node[5] = -node[2]
        node[6] = -node[1]
        node[7] = -node[0]
        
    elif NQ == 9:
        w[0] = 0.0812743883615744120
        w[1] = 0.1806481606948574041
        w[2] = 0.2606106964029354623
        w[3] = 0.3123470770400028401
        w[4] = 0.3302393550012597632
        w[5] = w[3]
        w[6] = w[2]
        w[7] = w[1]
        w[8] = w[0]
        
        node[0] = -0.96816023950762608984
        node[1] = -0.83603110732663579430
        node[2] = -0.61337143270059039731
        node[3] = -0.32425342340380892904
        node[4] =  0.
        node[5] = -node[3]
        node[6] = -node[2]
        node[7] = -node[1]
        node[8] = -node[0]
        
    elif NQ == 10:
        w[0] = 0.0666713443086881376
        w[1] = 0.1494513491505805931
        w[2] = 0.2190863625159820440
        w[3] = 0.2692667193099963551
        w[4] = 0.2955242247147528702
        w[5] = w[4]
        w[6] = w[3]
        w[7] = w[2]
        w[8] = w[1]
        w[9] = w[0]
        
        node[0] = -0.97390652851717172008
        node[1] = -0.86506336668898451073
        node[2] = -0.67940956829902440623
        node[3] = -0.43339539412924719080
        node[4] = -0.14887433898163121088
        node[5] = -node[4]
        node[6] = -node[3]
        node[7] = -node[2]
        node[8] = -node[1]
        node[9] = -node[0]
    
    return w, node
        
        
    
        
        
        
        
        
        
        
        
    